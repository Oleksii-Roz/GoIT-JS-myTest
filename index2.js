// const playlist = {
//   name: "My play musics",
//   rating: 5,
//   tracks: ["pesny1", "pesny2", "pesny3"],
//   trackCount: 3,
//   getName(a, b, c) {
//     console.log("Aga eto getName :", a, c, b);
//   },
// };

// console.log(playlist);

// playlist.getName(5, 12, 7);

// –í –æ–±—ä–µ–∫—Ç–µ playlist –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ name: "My play musics" –Ω–∞ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ name: 'Novoe imy':
// –î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ–±—ä–µ–∫—Ç–µ changeName(newName) –∏ –≤ –Ω–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º this
// const playlist = {
//   name: "My play musics",
//   rating: 5,
//   tracks: ["pesny1", "pesny2", "pesny3"],
//   trackCount: 3,
//   changeName(newName) {
//     console.log("this vnytri changeName: ", this);

//     this.name = newName;
//   },
// };

// playlist.changeName("Novoe imy");

// console.log(playlist);

// –í –æ–±—ä–µ–∫—Ç–µ playlist –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é tracks: ["pesny1", "pesny2", "pesny3"] –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤ tracks: ['pesny1', 'pesny2', 'pesny3', '–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ 1']:
// –î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ–±—ä–µ–∫—Ç–µ addTrack(track) –∏ –≤ –Ω–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º this –∏ —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å .push(track)
// const playlist = {
//   name: "My play musics",
//   rating: 5,
//   tracks: ["pesny1", "pesny2", "pesny3"],
//   trackCount: 3,
//   changeName(newName) {
//     console.log("this vnytri changeName: ", this);

//     this.name = newName;
//   },
//   addTrack(track) {
//     this.tracks.push(track);
//   },
// };

// playlist.changeName("Novoe imy");
// console.log(playlist);

// playlist.addTrack("–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ 1");
// console.log(playlist);

// –ú–µ—Ç–æ–¥ 1. –í –æ–±—ä–µ–∫—Ç–µ playlist –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é tracks: ["pesny1", "pesny2", "pesny3"] –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤ tracks: ['pesny1', 'pesny2', 'pesny3', '–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ 1']. –ü–ª—é—Å —Å–≤–æ–π—Å—Ç–≤–æ trackCount –¥–æ–ª–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –≤ –æ–±—ä–µ–∫—Ç–µ playlist.
// –î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ–±—ä–µ–∫—Ç–µ addTrack(track) –∏ –≤ –Ω–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º this –∏ —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å .push(track) –ü–æ—Å–ª–µ —Ç—É—Ç –∂–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ addTrack(track) –¥–æ–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è trackCount –≤ –æ–±—ä–µ–∫—Ç–µ playlist
// const playlist = {
//   name: "My play musics",
//   rating: 5,
//   tracks: ["pesny1", "pesny2", "pesny3"],
//   trackCount: 3,
//   changeName(newName) {
//     console.log("this vnytri changeName: ", this);
//     this.name = newName;
//   },

//   addTrack(track) {
//     this.tracks.push(track);
//     this.trackCount = this.tracks.length; // –ø—Ä–∏–≤—è–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è trackCount,–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è trackCount —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª-–≤–æ —Ç—Ä–µ–∫–æ–≤ tracks –≤ –æ–±—ä–µ–∫—Ç–µ playlist
//   },

//   updateRating(newRating) {
//     this.rating = newRating;
//   },
// };

// playlist.changeName("Novoe imy");
// console.log(playlist);

// playlist.addTrack("–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ 1");
// console.log(playlist);

// playlist.addTrack("–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ 2");
// console.log(playlist);

// playlist.addTrack("–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ 3");
// console.log(playlist);

// playlist.updateRating(4);
// console.log(playlist);

// –ú–µ—Ç–æ–¥ 2. –í –æ–±—ä–µ–∫—Ç–µ playlist –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é tracks: ["pesny1", "pesny2", "pesny3"] –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤ tracks: ['pesny1', 'pesny2', 'pesny3', '–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ 1']. –ü–ª—é—Å —Å–≤–æ–π—Å—Ç–≤–æ trackCount –¥–æ–ª–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –≤ –æ–±—ä–µ–∫—Ç–µ playlist.
// const playlist = {
//   name: "My play musics",
//   rating: 5,
//   tracks: ["pesny1", "pesny2", "pesny3"],
//   changeName(newName) {
//     console.log("this vnytri changeName: ", this);
//     this.name = newName;
//   },

//   addTrack(track) {
//     this.tracks.push(track);
//   },

//   updateRating(newRating) {
//     this.rating = newRating;
//   },

//   getTrackCount() {
//     return this.tracks.length;
//   },
// };
// console.log(playlist.getTrackCount());

// playlist.changeName("Novoe imy");
// console.log(playlist);

// playlist.addTrack("–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ 1");
// console.log(playlist);
// console.log(playlist.getTrackCount());

// playlist.addTrack("–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ 2");
// console.log(playlist);
// console.log(playlist.getTrackCount());

// playlist.addTrack("–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ 3");
// console.log(playlist);
// console.log(playlist.getTrackCount());

// playlist.updateRating(4);
// console.log(playlist);

//–ú–µ—Ç–æ–¥ forEach
// –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–ª—É—á–∞–µ–º, –∫–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏–∫–ª—ã for –∏–ª–∏ for...of –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –º–∞—Å—Å–∏–≤–∞, —ç—Ç–æ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞. –ü—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ forEach –Ω–µ–ª—å–∑—è, –æ–Ω –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –º–∞—Å—Å–∏–≤ –¥–æ –∫–æ–Ω—Ü–∞.

// const numbers = [5, 10, 15, 20, 25];

// // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π for
// for (let i = 0; i < numbers.length; i += 1) {
//   console.log(`–ò–Ω–¥–µ–∫—Å ${i}, –∑–Ω–∞—á–µ–Ω–∏–µ ${numbers[i]}`);
// }

// console.log("–ü—Ä–∏–º–µ—Ä —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ forEach –ø–µ—Ä–µ–±–∏—Ä–∞—é—â–∏–π:");
// // –ü–µ—Ä–µ–±–∏—Ä–∞—é—â–∏–π forEach
// numbers.forEach(function (number, index) {
//   console.log(`–ò–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–∏–µ ${number}`);
// });

// ==============================–°—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è=========================
//---------- –û–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è add ----------
// function add(...args) {
//   console.log(args);
// }
// add(1, 2, 3); // [1, 2, 3]

// ------------- –°—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è add —Å {} ----------
// const add = (...args) => {
//   console.log(args);
// };
// add(1, 2, 3); // [1, 2, 3]

//---------- –°—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è add –±–µ–∑ {} ----------
// const add = (...arg) => console.log(arg);
// add(1, 2, 3); // [1, 2, 3]
// ==========================================================================

//------------------------------------------------------------------------
// "Apple" - –≤—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –Ω–∞–æ–±–æ—Ä–æ—Ç
// const a = "Apple";
// const b = a.split("").reverse().join("");
// console.log(b);

// function sortFunction(a, b) {
//   if (a < b) return 1;
//   if (a > b) return -1;
//   return 0;
// }

// var arr = new Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

// console.log(arr.sort(sortFunction));

// let newString = "";
// let str = "";
// function reverseString(str) {
//   //   var newString = "";

//   for (var i = str.length - 1; i >= 0; i--) {
//     newString += str[i];
//   }

//   console.log(newString);
//   return newString;
// }
// reverseString("apple");

// function reverseWord(old, revOld) {
//   if (old !== revOld) {
//     console.log(`–£–≤—ã, "${old} –Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º!!!`);
//   } else {
//     console.log(`–û –¥–∞, "${old}" –ø–∞–ª–∏–Ω–¥—Ä–æ–º!!!`);
//   }
// }
// reverseWord("Bla", "Bla");
// reverseWord("Bla", "Blaaaaaaaa");
// reverseWord(newString, str);

// console.log(newString, newString, reverseString);
//---------------------------------------------------------

// function palindromeChecker(str) {
//   str = str.toLowerCase().replace(/[^–∞-—èa-z1-9]/gi, "");
//   const lastIndex = str.length - 1;
//   for (let i = 0; i < str.length / 2; i++) {
//     if (str[i] !== str[lastIndex - i]) {
//       return false;
//     }
//   }
//   return true;
// }

// function palindromeChecker2(str) {
//   str = str.toLowerCase().replace(/[^–∞-—èa-z1-9]/gi, "");
//   const halfOfLength = Math.floor(str.length / 2);
//   return (
//     str.substr(0, Math.floor(halfOfLength)) ===
//     str
//       .substr(Math.floor(str.length % 2 ? halfOfLength + 1 : halfOfLength))
//       .split("")
//       .reverse()
//       .join("")
//   );
// }

// const fn1 = (s) =>
//   s
//     .split("")
//     .reduce(
//       (f, o, i) => (i < s.length / 2 ? s[i] === s[s.length - i - 1] && f : f),
//       true
//     );

// –∏–ª–∏;

// const fn2 = (s) => s.split("").reverse().join("") == s;

//--------------------------------------------------------------------------

//---------------------------------------------------------------------------
// –ó–∞–¥–∞—á–∞. –°–¥–µ–ª–∞—Ç—å —Å–ª–æ–≤–æ –ø–µ—Ä–µ–≤–µ—Ä—Ç—ã—à, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º –ª–∏ –æ–Ω–æ.
//–í–∞—Ä–∏–∞–Ω—Ç 1-------------------------------------------------------------
// function reverseString(str, callback) {
//   callback(str);
//   let newString = "";

//   for (let i = str.length - 1; i >= 0; i--) {
//     newString += str[i];
//   }

//   console.log(`–î–ª—è "${str}" –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ—Ä—Ç—ã—à:`, newString);
//   return newString;
// }
// reverseString("JavaScript", function palindromeChecker(str) {
//   str = str.toLowerCase().replace(/[^–∞-—èa-z1-9]/gi, "");
//   const lastIndex = str.length - 1;
//   for (let i = 0; i < str.length / 2; i++) {
//     if (str[i] !== str[lastIndex - i]) {
//       return console.log(
//         `–£–≤—ã, "${
//           str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase()
//         }" –Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º, —Å–ø–æ–±—É–π —â–µ!!!üòÅüòÅüòÅüòéüòéüòé `
//       );
//     }
//   }
//   return console.log(
//     `–û –¥–∞, "${
//       str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase()
//     }" –ø–∞–ª–∏–Ω–¥—Ä–æ–º!!!üòÄüòÄüòÄüòâüòâüòâ`
//   );
// });
// reverseString("Ava", function palindromeChecker(str) {
//   str = str.toLowerCase().replace(/[^–∞-—èa-z1-9]/gi, "");
//   const lastIndex = str.length - 1;
//   for (let i = 0; i < str.length / 2; i++) {
//     if (str[i] !== str[lastIndex - i]) {
//       return console.log(
//         `–£–≤—ã, "${
//           str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase()
//         }" –Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º, —Å–ø–æ–±—É–π —â–µ!!!üòÅüòÅüòÅüòéüòéüòé `
//       );
//     }
//   }
//   return console.log(
//     `–û –¥–∞, "${
//       str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase()
//     }" –ø–∞–ª–∏–Ω–¥—Ä–æ–º!!!üòÄüòÄüòÄüòâüòâüòâ`
//   );
// });

//---------------------------------------------------------------------------------
//–í–∞—Ä–∏–∞–Ω—Ç 2-------------------------------------------------------------

// function reverseString(str) {
//   let newString = "";

//   for (let i = str.length - 1; i >= 0; i--) {
//     newString += str[i];
//   }

//   console.log(`–î–ª—è "${str}" –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ—Ä—Ç—ã—à:`, newString);
//   return newString;
// }

// function palindromeChecker(str) {
//   // str = str.toLowerCase().replace(/[^–∞-—èa-z1-9]/gi, "");
//   str = str.toLowerCase().replace();
//   const lastIndex = str.length - 1;
//   for (let i = 0; i < str.length / 2; i++) {
//     if (str[i] !== str[lastIndex - i]) {
//       return console.log(
//         `–£–≤—ã, "${
//           str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase()
//         }" –Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º, —Å–ø–æ–±—É–π —â–µ!!!üòÅüòÅüòÅüòéüòéüòé `
//       );
//     }
//   }
//   return console.log(
//     `–û –¥–∞, "${
//       str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase()
//     }" –ø–∞–ª–∏–Ω–¥—Ä–æ–º!!!üòÄüòÄüòÄüòâüòâüòâ`
//   );
// }

// function makeMessage(str, callback) {
//   return callback(str);
// }

// makeMessage("JavaScript", reverseString);
// makeMessage("JavaScript", palindromeChecker);

// makeMessage("Ava", reverseString);
// makeMessage("Ava", palindromeChecker);

// makeMessage("–§—É—Ñ", reverseString);
// makeMessage("–§—É—Ñ", palindromeChecker);

// makeMessage("JS –º–Ω–µ —Ç—Ä—É–¥–µ–Ω", reverseString);
// makeMessage("JS –º–Ω–µ —Ç—Ä—É–¥–µ–Ω", palindromeChecker);

// makeMessage("123321", reverseString);
// makeMessage("123321", palindromeChecker);

// makeMessage("1234567890", reverseString);
// makeMessage("1234567890", palindromeChecker);
//------------------------------------------------------------------------------

// // function calculateTotalPrice(quantity, pricePerItem) {
// //   return quantity * pricePerItem;
// // }

// const calculateTotalPrice = (quantity, pricePerItem) => {
//   return quantity * pricePerItem;
// };

// –ó–ê–î–ê–ß–ê /48------------------------------------------------------------------------

// –ó–ê–î–ê–ß–ê 6/48------------------------------------------------------------------------

const add = (a, b) => a + b;
console.log(add(5, 10));

const planets = ["–ó–µ–º–ª—è", "–ú–∞—Ä—Å", "–í–µ–Ω–µ—Ä–∞", "–Æ–ø–∏—Ç–µ—Ä"];

const planetsInUpperCase = planets.map(planet => planet.toUpperCase());
console.log(planetsInUpperCase); // ['–ó–ï–ú–õ–Ø', '–ú–ê–†–°', '–í–ï–ù–ï–†–ê', '–Æ–ü–ò–¢–ï–†']
console.log(planets); //['–ó–µ–º–ª—è', '–ú–∞—Ä—Å', '–í–µ–Ω–µ—Ä–∞', '–Æ–ø–∏—Ç–µ—Ä']

//=========================================
const studentsMy = [
	{ name: "–ú–∞–Ω–≥–æ", courses: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞"] },
	{ name: "–ü–æ–ª–∏", courses: ["–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"] },
	{ name: "–ö–∏–≤–∏", courses: ["—Ñ–∏–∑–∏–∫–∞", "–±–∏–æ–ª–æ–≥–∏—è"] },
];

const allCourses = studentsMy.flatMap(student => student.courses);
// ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ–∏–∑–∏–∫–∞', '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ–∏–∑–∏–∫–∞', '–±–∏–æ–ª–æ–≥–∏—è'];

const uniqueCourses = allCourses.filter((course, index, array) => array.indexOf(course) === index); // ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ–∏–∑–∏–∫–∞', '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–±–∏–æ–ª–æ–≥–∏—è']
console.log(uniqueCourses);
console.log(allCourses);

//=========================================
const LOW_SCORE = 50;
const HIGH_SCORE = 80;
const students = [
	{ name: "–ú–∞–Ω–≥–æ", score: 83 },
	{ name: "–ü–æ–ª–∏", score: 59 },
	{ name: "–ê—è–∫—Å", score: 37 },
	{ name: "–ö–∏–≤–∏", score: 94 },
	{ name: "–•—å—é—Å—Ç–æ–Ω", score: 64 },
];

const best = students.filter(student => student.score >= HIGH_SCORE);
console.table(best); // –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏ –ú–∞–Ω–≥–æ –∏ –ö–∏–≤–∏

const worst = students.filter(student => student.score < LOW_SCORE);
console.table(worst); // –ú–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º –ê—è–∫—Å

// –í –∫–æ–ª–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–æ–±–Ω–æ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞
const average = students.filter(({ score }) => score >= LOW_SCORE && score < HIGH_SCORE);
console.table(average); // –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏ –ü–æ–ª–∏ –∏ –•—å—é—Å—Ç–æ–Ω

//============================================
const total = [2, 7, 3, 14, 6].reduce((previousValue, number) => {
	return previousValue + number;
}, 0);

console.log("—Å—É–º–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª —Ä–∞–≤–Ω–∞:", total); // 32
// # –í–Ω–∞—á–∞–ª–µ –º–µ—Ç–æ–¥ reduce() —Å–æ–∑–¥–∞—ë—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é-–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –∏
// # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ initialValue –∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
// # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –µ—Å–ª–∏ initialValue –Ω–µ –∑–∞–¥–∞–Ω.
// previousValue = 0

// # –î–∞–ª–µ–µ –∫–æ–ª–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
// # –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ previousValue —ç—Ç–æ —Ç–æ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–ª–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ—à–ª–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.
// –ò—Ç–µ—Ä–∞—Ü–∏—è 1 -> previousValue = 0 -> number = 2 -> return 0 + 2 -> return 2
// –ò—Ç–µ—Ä–∞—Ü–∏—è 2 -> previousValue = 2 -> number = 7 -> return 2 + 7 -> return 9
// –ò—Ç–µ—Ä–∞—Ü–∏—è 3 -> previousValue = 9 -> number = 3 -> return 9 + 3 -> return 12
// –ò—Ç–µ—Ä–∞—Ü–∏—è 4 -> previousValue = 12 -> number = 14 -> return 12 + 14 -> return 26
// –ò—Ç–µ—Ä–∞—Ü–∏—è 5 -> previousValue = 26 -> number = 6 -> return 26 + 6 -> return 32

// # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–±—Ä–∞–Ω, –º–µ—Ç–æ–¥ reduce() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞.
// –†–µ–∑—É–ª—å—Ç–∞—Ç - 32

//============================================

// const oldStudents = [
// 	{ name: "–ú–∞–Ω–≥–æ", score: 83 },
// 	{ name: "–ü–æ–ª–∏", score: 59 },
// 	{ name: "–ê—è–∫—Å", score: 37 },
// 	{ name: "–ö–∏–≤–∏", score: 94 },
// 	{ name: "–•—å—é—Å—Ç–æ–Ω", score: 64 },
// ];

// // –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–∏
// const totalScore = oldStudents.reduce((total, student) => {
// 	return total + student.score;
// }, 0);
// console.log("oldStudents —Å—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏—è score:", totalScore); // 337 score –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

// const averageScore = totalScore / oldStudents.length;
// console.log("oldStudents —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ score:", averageScore); // 67.4 —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ score

//============================================

//============================================
//–º–∞—Å—Å–∏–≤
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ NamesSortedByFriendCount
// const NamesSortedByFriendCount = users.flatMap(user => user.friends);
// console.log(NamesSortedByFriendCount);  // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ NamesSortedByFriendCount

//—Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –º–∞—Å—Å–∏–≤–∞ NamesSortedByFriendCount —Å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π
// const FriendCount = users => users.flatMap(user => user.friends);
// console.log(FriendCount(users)); // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –º–∞—Å—Å–∏–≤–∞ NamesSortedByFriendCount

//—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –º–∞—Å—Å–∏–≤–∞ NamesSortedByFriendCount –±–µ–∑ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π
// const TestFriendCount = users => {
// 	return users.flatMap(user => user.friends);
// };
// console.log(TestFriendCount(users));
//============================================
